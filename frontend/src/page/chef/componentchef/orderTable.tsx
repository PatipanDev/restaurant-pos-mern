import  { useState, useEffect } from 'react';
import { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Button, Paper, Box, Typography } from '@mui/material';
import socket from '../../../utils/socket';
import { formatDateTime } from '../../../utils/formatDateTime';
import { getEmployeeId } from '../../../utils/userUtils';
const userId = getEmployeeId();

interface OrderFoodDetail {
  _id: string;
  orderDetail_Quantity: number;
  orderDetail_Cooking: string;
  orderDetail_More: string;
  orderDetail_Serving: string;
  food_Id: { food_Name: string };
  chef_Id: { chef_Name: string };
  employee_Id: { employee_Name: string };
  createdAt: string;
}

const translateStatus = (status: string) => {
  switch (status) {
    case 'Pending':
      return (
        <span style={{ color: 'orange' }}>
          <span role="img" aria-label="pending">‚è≥</span> ‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
        </span>
      );
    case 'In Progress':
      return (
        <span style={{ color: 'blue' }}>
          <span role="img" aria-label="in-progress">üîÑ</span> ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
        </span>
      );
    case 'On Hold':
      return (
        <span style={{ color: 'gray' }}>
          <span role="img" aria-label="on-hold">‚è∏Ô∏è</span> ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
        </span>
      );
    case 'Completed':
      return (
        <span style={{ color: 'green' }}>
          <span role="img" aria-label="completed">‚úîÔ∏è</span> ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
        </span>
      );
    case 'Cancelled':
      return (
        <span style={{ color: 'red' }}>
          <span role="img" aria-label="cancelled">‚ùå</span> ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
        </span>
      );
    default:
      return status; // ‡∏ñ‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î, ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°
  }
};



const OrderTable = () => {
  const [selectedOrder, setSelectedOrder] = useState<string | null>(null); // ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
  const [ordersfood, setOrderFood] = useState<OrderFoodDetail[]>([]);
  console.log("ordersfood:", ordersfood);
  console.log("Type of ordersfood:", typeof ordersfood);
  console.log("Is ordersfood an array?", Array.isArray(ordersfood));

  useEffect(() => {
    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ socket ‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    socket.connect();
    // ‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
    if (socket.connected) {
      console.log("==>Socket connected");
    } else {
      console.error("Socket is not connected!");
    }
    console.log(ordersfood)

    socket.emit('getOrderFoodDetails');

    socket.on('orderFoodDetails', (orderDetails) => {
      if (!orderDetails || orderDetails.length === 0) {
        console.warn("‚ö†Ô∏è No order details received");
        setOrderFood([]); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô [] ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      } else {
        console.log('üì¶ Received order food details:', orderDetails);
        setOrderFood(orderDetails);
      }
    });
  }, [])


  const handleStartCooking = (orderId: string) => {
    const isConfirmed = window.confirm("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?");
    if (!isConfirmed) {
      console.log("‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠");
      return; // ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ‡∏Å‡πá‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
    }

    const userId = getEmployeeId();
    console.log("‡∏ä‡∏∑‡πà‡∏≠", userId, "oder", orderId)
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏ó‡∏µ‡πà Server ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
    socket.emit('startCooking', { orderId, userId });

    // ‡∏ü‡∏±‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Server
    socket.once('startConfirmed', (cooking) => {
      console.log('Cooking confirmed successfully:', cooking);

      socket.emit('getOrderFoodDetails');

      socket.on('orderFoodDetails', (orderDetails) => {
        if (!orderDetails || orderDetails.length === 0) {
          console.warn("‚ö†Ô∏è No order details received");
          setOrderFood([]); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô [] ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        } else {
          console.log('üì¶ Received order food details:', orderDetails);
          setOrderFood(orderDetails);
        }
      });

    });

    socket.on('orderError', (error) => {
      console.error('Error confirming order:', error.message);
      alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
    });
    // ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏õ‡∏ó‡∏µ‡πà server
  };

  const handleConfirmOrder = (orderId: string) => {
    const isConfirmed = window.confirm("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?");
    if (!isConfirmed) {
      console.log("‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠");
      return; // ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ‡∏Å‡πá‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
    }

    const userId = getEmployeeId();
    console.log("‡∏ä‡∏∑‡πà‡∏≠", userId, "oder", orderId)
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏ó‡∏µ‡πà Server ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
    socket.emit('FinishCooking', { orderId, userId });

    // ‡∏ü‡∏±‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Server
    socket.once('FinishConfirmed', (cooking) => {
      console.log('Cooking Finish fconfirmed successfully üëåüëå:', cooking);
      socket.emit('getOrderFoodDetails');

      socket.on('orderFoodDetails', (orderDetails) => {
        if (!orderDetails || orderDetails.length === 0) {
          console.warn("‚ö†Ô∏è No order details received");
          setOrderFood([]); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô [] ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        } else {
          console.log('üì¶ Received order food details:', orderDetails);
          setOrderFood(orderDetails);
        }
      });
    });

    socket.on('orderError', (error) => {
      console.error('Error confirming order:', error.message);
      alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
    });


    // ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà server
  };

  if (ordersfood.length === 0) {
    return (
      <div>
        <Box
          sx={{
            position: 'absolute',
            top: '50%',
            left: '50%',
            transform: 'translate(-50%, -50%)',
          }}
        >
          <Typography variant="body1" align="center">
            ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏±‡πà‡∏á‡∏°‡∏≤
          </Typography>
        </Box>
      </div>
    )
  }
  return (
    <>
      <TableContainer component={Paper} sx={{ width: '75vw', height: '90vh' }}>
        <Table sx={{ minWidth: 650 }} aria-label="simple table">
          <TableHead>
            <TableRow>
              <TableCell>‡∏•‡∏≥‡∏î‡∏±‡∏ö</TableCell>
              <TableCell>‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå</TableCell>
              <TableCell>‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£</TableCell>
              <TableCell>‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</TableCell>
              <TableCell>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</TableCell>
              <TableCell>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£</TableCell>
              <TableCell>‡πÄ‡∏ä‡∏ü‡∏ó‡∏µ‡πà‡∏ó‡∏≥</TableCell>
              <TableCell>‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå</TableCell>
              <TableCell>‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô</TableCell>
              <TableCell>‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {ordersfood.map((order, index) => {
              const { formattedDate, formattedTime } = formatDateTime(order.createdAt);
              return (
                <TableRow
                  key={order._id}
                  sx={{
                    '&:last-child td, &:last-child th': { border: 0 },
                    backgroundColor: selectedOrder === order._id ? '#f5f5f5' : '',
                  }}
                  onClick={() => setSelectedOrder(order._id)}
                >
                  <TableCell>{index + 1}</TableCell>
                  <TableCell>{order._id.substring(0, 6)}</TableCell>
                  <TableCell>{order.food_Id.food_Name}</TableCell>
                  <TableCell>{order.orderDetail_More}</TableCell>
                  <TableCell>{order.orderDetail_Quantity}</TableCell>
                  <TableCell>{translateStatus(order.orderDetail_Cooking)}</TableCell>
                  <TableCell>{order.chef_Id?.chef_Name || "‡πÑ‡∏°‡πà‡∏°‡∏µ"}</TableCell>
                  <TableCell>{formattedTime} ‡∏ß‡∏±‡∏ô {formattedDate}</TableCell>
                  <TableCell>
                    <Button
                      variant="outlined"
                      onClick={() => handleStartCooking(order._id)}
                      disabled={order.orderDetail_Cooking !== "Pending"} // ‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà "Pending"
                    >
                      ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥
                    </Button>
                  </TableCell>
                  <TableCell>
                    <Button
                      variant="contained"
                      color="primary"
                      onClick={() => handleConfirmOrder(order._id)}
                      disabled={order.orderDetail_Cooking !== "In Progress" || String(order.chef_Id) === String(userId)}
                    >
                      ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
                    </Button>
                  </TableCell>
                </TableRow>
              )
            })}
          </TableBody>
        </Table>
      </TableContainer>
    </>

  );
};

export default OrderTable;
