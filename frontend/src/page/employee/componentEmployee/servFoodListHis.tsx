import React, {  useState, useEffect } from 'react';
import { Box, Grid, Card, CardContent, Typography, Button, Divider } from '@mui/material';
import { getEmployeeId } from '../../../utils/userUtils';
import { formatDateTime } from '../../../utils/formatDateTime';


import socket from '../../../utils/socket';

const translateStatusServ = (status: string) => {
  switch (status) {
    case 'Not Served':
      return (
        <span style={{ color: 'orange' }}>
          <span role="img" aria-label="not-served">‚è≥</span> ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü
        </span>
      );
    case 'Served':
      return (
        <span style={{ color: 'blue' }}>
          <span role="img" aria-label="served">üçΩÔ∏è</span> ‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡πÅ‡∏•‡πâ‡∏ß
        </span>
      );
    case 'Delivered':
      return (
        <span style={{ color: 'green' }}>
          <span role="img" aria-label="delivered">üì¶</span> ‡∏™‡πà‡∏á‡∏ñ‡∏∂‡∏á‡πÅ‡∏•‡πâ‡∏ß
        </span>
      );
    case 'Returned':
      return (
        <span style={{ color: 'red' }}>
          <span role="img" aria-label="returned">üîÑ</span> ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô
        </span>
      );
    default:
      return status; // ‡∏ñ‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î, ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°
  }
};


const ServFoodListHis: React.FC = () => {
  const [foodready, setFoodReady] = useState<any[]>([]);
  const [drinkready, setDrinkReady] = useState<any[]>([]);

  useEffect(() => {
    // ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ socket
    socket.connect();
    // ‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
    if (socket.connected) {
      socket.emit('getFoodReadyHis');
      console.log("==>Socket connected");
    } else {
      console.error("Socket is not connected!");
    }
    socket.on('dataFoodReady', ({ food, drink }) => {
      console.log("‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü:", food);
      console.log("‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü:", drink);
      setFoodReady(food)
      setDrinkReady(drink)
    });

  }, []);



  const handleConfirmServ = (orderId: string) => {
    const isConfirmed = window.confirm("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?");
    if (!isConfirmed) {
      console.log("‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠");
      return; // ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ‡∏Å‡πá‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
    }

    const userId = getEmployeeId();
    console.log("‡∏ä‡∏∑‡πà‡∏≠", userId, "oder", orderId)
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏ó‡∏µ‡πà Server ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
    socket.emit('FinishServ', { orderId, userId });

    // ‡∏ü‡∏±‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Server
    socket.once('ServConfirmed', (servking) => {
      console.log('Servking Finish fconfirmed successfully üëåüëå:', servking);
      alert('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï State ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà
      setFoodReady((prevOrders) => prevOrders.filter(order => order._id !== orderId));
    });

    socket.on('orderError', (error) => {
      console.error('Error confirming order:', error.message);
      alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
    });
  };


  if (foodready.length === 0) {
    return (
      <div>
        <Box
          display="flex"
          justifyContent="center"
          alignItems="center"
          minHeight="80vh" // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ Box ‡πÄ‡∏ï‡πá‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á viewport
        >
          <Typography variant="body1" align="center">
            ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
          </Typography>
        </Box>
      </div>
    )
  }

  return (
    <Box sx={{ padding: 2 }}>
      <Grid container spacing={2}>
        {foodready.map((order, index) => {
          const { formattedTime } = formatDateTime(order.createdAt);
          return (
            <Grid item xs={12} key={index}>
              <Card>
                <CardContent>
                <Typography variant="h6" gutterBottom>
                    ‡πÇ‡∏ï‡πä‡∏∞ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç: {order.order_Id?.table_Id?.number}
                  </Typography>
                  <Typography variant="h6" gutterBottom>
                    ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£: {order.food_Id?.food_Name}
                  </Typography>
                  <Typography variant="body1">‡∏≠‡∏≤‡∏´‡∏≤‡∏£  </Typography>
                  <Typography variant="body2">
                    ‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå: {order?._id.substring(0, 6)}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {order?.orderDetail_More || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"}
                  </Typography>
                  <Typography variant="body2">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: x{order?.orderDetail_Quantity} </Typography>
                  <Typography variant="body2">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏û:  {translateStatusServ(order?.orderDetail_Serving)}</Typography>
                  <Typography variant="body2">‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏û: {order?.employee_Id || "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏û"}</Typography>
                  <Typography variant="body2">‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à: {formattedTime}</Typography>

                  <Divider sx={{ my: 2 }} />

                  <Button
                    variant="contained"
                    color="primary"
                    onClick={() => handleConfirmServ(order._id)}
                    disabled
                  // disabled={order.orderDetail_Cooking !== "In Progress" || String(order.chef_Id) === String(userId)}
                  >
                    ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏û
                  </Button>
                </CardContent>
              </Card>
            </Grid>
          )
        })}
      </Grid>
      <Grid container spacing={2}>
        {drinkready.map((order, index) => {
          const {  formattedTime } = formatDateTime(order.createdAt);
          return (
            <Grid item xs={12} key={index}>
              {order.order_Id?.table_Id?.number && (
                <Card>
                  <CardContent>
                    <Typography variant="h6" gutterBottom >
                      ‡πÇ‡∏ï‡πä‡∏∞ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç: {order.order_Id?.table_Id?.number}
                    </Typography>
                    <Typography variant="h6" gutterBottom >
                     ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°: {order.drink_Id?.drink_Name}
                    </Typography>
                    <Typography variant="body1">‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏° </Typography>
                    <Typography variant="body2">
                      ‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå: {order?._id.substring(0, 6)}
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {order?.orderDetail_More || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"}
                    </Typography>
                    <Typography variant="body2">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: x{order?.orderDetail_Quantity} </Typography>
                    <Typography variant="body2">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏û:  {translateStatusServ(order?.orderDetail_Serving)}</Typography>
                    <Typography variant="body2">‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏û: {order?.employee_Id || "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏û"}</Typography>
                    <Typography variant="body2">‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à: {formattedTime}</Typography>

                    <Divider sx={{ my: 2 }} />

                    <Button
                      variant="contained"
                      color="primary"
                      onClick={() => handleConfirmServ(order._id)}
                    // disabled={order.orderDetail_Cooking !== "In Progress" || String(order.chef_Id) === String(userId)}
                    >
                      ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏û
                    </Button>
                  </CardContent>
                </Card>
              )}
            </Grid>
          )
        })}
      </Grid>
    </Box>
  );
};

export default ServFoodListHis;
