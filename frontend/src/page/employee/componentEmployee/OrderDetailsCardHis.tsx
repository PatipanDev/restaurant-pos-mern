import  {  useState, useEffect } from 'react';
import { Card, CardContent, Typography, Box, Button, Grid } from '@mui/material';
import OrderDetailsCheck from './OrderDetailsCheck';


import socket from '../../../utils/socket';
import { getEmployeeId } from '../../../utils/userUtils';
// ‡∏ü‡∏±‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏à‡∏≤‡∏Å server
import { formatDateTime } from '../../../utils/formatDateTime';



const OrderDetailsCardHis = () => {
  const [orders, setOrders] = useState<any[]>([]);
  const [selectedOrderId, setSelectedOrderId] = useState<string | null>(null);

  useEffect(() => {
    // ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ socket
    socket.connect();
    // ‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
    if (socket.connected) {
      socket.emit('get_latest_order_his');
      console.log("==>Socket connected");
    } else {
      console.error("Socket is not connected!");
    }

    socket.on('new_order_for_staff', (latestOrders) => {
      console.log('üì¶ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:', latestOrders);
      if (latestOrders) {
        setOrders(latestOrders);
      } else {
        console.error("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà");
      }
    });
    
  }, []);

  const handleOpenClick = (drinkId: string) => {
    setSelectedOrderId(drinkId); // ‡πÄ‡∏õ‡∏¥‡∏î Modal ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤
  };
  const handdlecloseDetail = () => {
    setSelectedOrderId(null); // ‡∏õ‡∏¥‡∏î Modal
  };

  const handleConfirmOrder = async (orderId: string) => {
    const isConfirmed = window.confirm("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?");
    if (!isConfirmed) {
      console.log("‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠");
      return; // ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ‡∏Å‡πá‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
    }

    const userId = getEmployeeId();
    console.log("‡∏ä‡∏∑‡πà‡∏≠", userId, "oder", orderId)
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏ó‡∏µ‡πà Server ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
    socket.emit('confirmOrder', { orderId, userId });

    // ‡∏ü‡∏±‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Server
    socket.once('orderConfirmed', (order) => {
      console.log('Order confirmed successfully:', order);
      alert('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');

      socket.emit('get_latest_order');

      // ‡∏ü‡∏±‡∏á event `new_order_for_staff`
      socket.on('new_order_for_staff', (latestOrders) => {
        console.log('üì¶ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:', latestOrders);
        setOrders(latestOrders);
      });

    });

    socket.on('orderError', (error) => {
      console.error('Error confirming order:', error.message);
      alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
    });

  };

  const handleCancelOrder = async (orderId: string) => {
    const isConfirmed = window.confirm("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?");
    if (!isConfirmed) {
      console.log("‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠");
      return; // ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ‡∏Å‡πá‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
    }

    const userId = getEmployeeId();
    console.log("‡∏ä‡∏∑‡πà‡∏≠", userId, "oder", orderId)
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏ó‡∏µ‡πà Server ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
    socket.emit('CancelledOrder', { orderId, userId });

    // ‡∏ü‡∏±‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Server
    socket.once('orderCancelled', (order) => {
      console.log('Order confirmed successfully:', order);
      alert('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');

      socket.emit('get_latest_order');

      // ‡∏ü‡∏±‡∏á event `new_order_for_staff`
      socket.on('new_order_for_staff', (latestOrders) => {
        console.log('üì¶ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:', latestOrders);
        setOrders(latestOrders);
      });

    });

    socket.on('orderError', (error) => {
      console.error('Error confirming order:', error.message);
      alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
    });

  };
  if (orders.length === 0) {
    return (
      <div>
        <Box
          display="flex"
          justifyContent="center"
          alignItems="center"
          minHeight="80vh" // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ Box ‡πÄ‡∏ï‡πá‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á viewport
        >
          <Typography variant="body1" align="center">
            ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
          </Typography>
        </Box>
      </div>
    )
  }

  return (
    <div>
      {selectedOrderId ? (
        <div>
          {selectedOrderId && <OrderDetailsCheck _id={selectedOrderId} onClose={handdlecloseDetail} />}
        </div>
      ) : (
        <Grid item xs={12} sm={6} md={4}>
          <Card elevation={3} sx={{ borderRadius: 2 }}>
            {orders.map((order) => {
              const { formattedDate, formattedTime } = formatDateTime(order.createdAt);
              return (
                <CardContent key={order._id} onClick={() => handleOpenClick(order._id)}>
                  <Typography variant="h6" gutterBottom color="primary" sx={{ fontWeight: 'bold' }}>
                    ‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå: #{order._id.substring(0, 6)}
                  </Typography>
                  <Typography variant="body1" gutterBottom>‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: {order?.customer_Id?.customer_Name}</Typography>
                  <Typography variant="body1" gutterBottom>‡∏™‡∏±‡πà‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: ‡πÄ‡∏ß‡∏•‡∏≤ {formattedTime} ‡∏ô.  ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {formattedDate}</Typography>
                  <Typography variant="body1" gutterBottom>‡πÇ‡∏ï‡πä‡∏∞: {order?.table_Id?.number} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á {order?.table_Id?.seat_count}</Typography>

                  {/* ‡∏õ‡∏∏‡πà‡∏°‡∏ä‡∏¥‡∏î‡∏Ç‡∏ß‡∏≤ */}
                  <Box sx={{ marginTop: 2, display: 'flex', justifyContent: 'flex-end' }}>

                    <Button
                      variant="contained"
                      color="secondary"
                      disabled
                      sx={{ marginRight: 2 }}
                      onClick={(event) => {
                        event.stopPropagation(); // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠ event ‡πÑ‡∏õ‡∏¢‡∏±‡∏á CardContent
                        handleCancelOrder(order._id);
                      }}
                    >
                      ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
                    </Button>
                    <Button
                      variant="contained"
                      color="primary"
                      disabled

                      onClick={(event) => {
                        event.stopPropagation(); // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠ event ‡πÑ‡∏õ‡∏¢‡∏±‡∏á CardContent
                        handleConfirmOrder(order._id);
                      }}
                    >
                      ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
                    </Button>
                  </Box>
                </CardContent>
              );
            })}
          </Card>
        </Grid>)}
    </div>
  );
};

export default OrderDetailsCardHis;
