import { useForm, Controller } from "react-hook-form";
import { Box, Button, TextField, InputLabel, Typography, Grid, Alert } from "@mui/material";
import axios from "axios"; // Import axios
import React, { useState, useEffect } from 'react';
import SuccessAlert from "../../../components/AlertSuccess";
const API_URL = import.meta.env.VITE_API_URL;

interface WebsiteFormData {
  websiteName: string;
  websiteDescription: string;
  phoneNumber: string;
  eMail: string;
  facebookAccount: string;
  lineId: string;
  xAccount: string;
  instagramAccount: string;
  address: string;
  primaryColor: string;
  secondaryColor: string;
  otherContact?: string;
}

const WebsiteInfoForm: React.FC = () => {
  const { control, handleSubmit, reset, formState: { errors, isSubmitting } } = useForm<WebsiteFormData>();
  const [submitSuccess, setSubmitSuccess] = useState<boolean | null>(null);
  const [submitError, setSubmitError] = useState<any>(null);

  const [alertSuccess, setAlertSuccess] = useState<React.ReactNode | null>(null);
  const fetchWebsiteInfo = async () => {
    try {
      const response = await axios.get(`${API_URL}/api/setting/getFormSetting`); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å backend
      const websiteData = response.data.settingweb[0]; // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏Å‡∏à‡∏≤‡∏Å array

      console.log(response);
      console.log(websiteData);

      // ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡∏•‡∏á‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
      reset({
        websiteName: websiteData.websiteName || "",
        websiteDescription: websiteData.websiteDescription || "",
        phoneNumber: websiteData.phoneNumber || "",
        eMail: websiteData.eMail || "",
        facebookAccount: websiteData.facebookAccount || "",
        lineId: websiteData.lineId || "",
        xAccount: websiteData.xAccount || "",
        instagramAccount: websiteData.instagramAccount || "",
        address: websiteData.address || "",
        primaryColor: websiteData.primaryColor || "#000000", // ‡∏Ñ‡πà‡∏≤ default ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
        secondaryColor: websiteData.secondaryColor || "#ffffff",
        otherContact: websiteData.otherContact || ""
      });

    } catch (error) {
      console.error("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", error);
    }
  };

  useEffect(() => {
    

    fetchWebsiteInfo();
  }, [reset]);



  const onSubmit = async (data: WebsiteFormData) => {
    setSubmitSuccess(null);
    setSubmitError(null);
    try {
      // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á API endpoint ‡∏î‡πâ‡∏ß‡∏¢ Axios
      const response = await axios.post(`${API_URL}/api/setting/postFormSetting`, data); // ‡πÅ‡∏ó‡∏ô '/api/settings' ‡∏î‡πâ‡∏ß‡∏¢ endpoint ‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
      console.log('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', response.data);
      setSubmitSuccess(true);
      setAlertSuccess(<div>‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</div>)
 
      reset(); // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      fetchWebsiteInfo();
    } catch (error: any) {
      console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error);
      setSubmitError(error);
      setSubmitSuccess(false);
      // ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
    }
  };

  return (
    <Box sx={{ maxWidth: 600, margin: "auto", padding: 2 }}>
      <Typography variant="h4" gutterBottom>
        ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå
      </Typography>

      {submitSuccess === true && (
        <Alert severity="success" sx={{ marginBottom: 2 }}>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</Alert>
      )}
      {submitSuccess === false && submitError && (
        <Alert severity="error" sx={{ marginBottom: 2 }}>
          ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {submitError.message}
        </Alert>
      )}

      <form onSubmit={handleSubmit(onSubmit)}>
        <Grid container spacing={2}>
          {/* ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå */}
          <Grid item xs={12}>
            <Controller
              name="websiteName"
              control={control}
              render={({ field }) => (
                <>
                  <InputLabel shrink={!!field.value}>‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå</InputLabel>
                  <TextField
                    {...field}
                    fullWidth
                    error={!!errors.websiteName}
                    helperText={errors.websiteName?.message}
                  />
                </>
              )}
            />
          </Grid>

          {/* ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå */}
          <Grid item xs={12}>
            <Controller
              name="websiteDescription"
              control={control}
              render={({ field }) => (
                <>
                  <InputLabel shrink={!!field.value}>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå</InputLabel>
                  <TextField
                    {...field}
                    fullWidth
                    multiline
                    rows={4}
                    error={!!errors.websiteDescription}
                    helperText={errors.websiteDescription?.message}
                  />
                </>
              )}
            />
          </Grid>

          {/* ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå */}
          <Grid item xs={12}>
            <Controller
              name="phoneNumber"
              control={control}
              rules={{
                pattern: {
                  value: /^[0-9]{10}$/,
                  message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
                }
              }}
              render={({ field }) => (
                <>
                  <InputLabel shrink={!!field.value}>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå</InputLabel>
                  <TextField
                    {...field}
                    fullWidth
                    error={!!errors.phoneNumber}
                    helperText={errors.phoneNumber?.message}
                  />
                </>
              )}
            />
          </Grid>

          {/* ‡∏≠‡∏µ‡πÄ‡∏°‡∏• */}
          <Grid item xs={12}>
            <Controller
              name="eMail"
              control={control}
              rules={{
                pattern: { value: /^[^\s@]+@[^\s@]+\.[^\s@]+$/, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" }
              }}
              render={({ field }) => (
                <>
                  <InputLabel shrink={!!field.value}>‡∏≠‡∏µ‡πÄ‡∏°‡∏•</InputLabel>
                  <TextField
                    {...field}
                    fullWidth
                    margin="dense"
                    error={!!errors.eMail}
                    helperText={errors.eMail?.message}
                  />
                </>
              )}
            />
          </Grid>

          {/* Line ID */}
          <Grid item xs={12}>
            <Controller
              name="lineId"
              control={control}
              render={({ field }) => (
                <>
                  <InputLabel shrink={!!field.value}>Line ID</InputLabel>
                  <TextField
                    {...field}
                    fullWidth
                  />
                </>
              )}
            />
          </Grid>

          {/* Facebook */}
          <Grid item xs={12}>
            <Controller
              name="facebookAccount"
              control={control}
              render={({ field }) => (
                <>
                  <InputLabel shrink={!!field.value}>Facebook</InputLabel>
                  <TextField
                    {...field}
                    fullWidth
                  />
                </>
              )}
            />
          </Grid>

          {/* Instagram */}
          <Grid item xs={12}>
            <Controller
              name="instagramAccount"
              control={control}
              render={({ field }) => (
                <>
                  <InputLabel shrink={!!field.value}>Instagram</InputLabel>
                  <TextField
                    {...field}
                    fullWidth
                  />
                </>
              )}
            />
          </Grid>

          {/* X (Twitter) */}
          <Grid item xs={12}>
            <Controller
              name="xAccount"
              control={control}
              render={({ field }) => (
                <>
                  <InputLabel shrink={!!field.value}>X (Twitter)</InputLabel>
                  <TextField
                    {...field}
                    fullWidth
                  />
                </>
              )}
            />
          </Grid>

          {/* ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà */}
          <Grid item xs={12}>
            <Controller
              name="address"
              control={control}
              render={({ field }) => (
                <>
                  <InputLabel shrink={!!field.value}>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</InputLabel>
                  <TextField
                    {...field}
                    fullWidth
                    multiline
                    rows={4}
                    error={!!errors.address}
                    helperText={errors.address?.message}
                  />
                </>
              )}
            />
          </Grid>
          <div style={{ width: "100%", height: "40px", border: "none", cursor: "pointer", display: "none" }}>
            {/* üé® Primary Color */}
          <Grid item xs={6}>
            <InputLabel shrink>‡∏™‡∏µ‡∏ò‡∏µ‡∏°‡∏´‡∏•‡∏±‡∏Å</InputLabel>
            <Controller
              name="primaryColor"
              control={control}
              render={({ field }) => (
                <input
                  type="color"
                  {...field}
                  style={{ width: "100%", height: "40px", border: "none", cursor: "pointer" }}
                />
              )}
            />
          </Grid>

          {/* üé® Secondary Color */}
          <Grid item xs={6}>
            <InputLabel shrink>‡∏™‡∏µ‡∏ò‡∏µ‡∏°‡∏£‡∏≠‡∏á</InputLabel>
            <Controller
              name="secondaryColor"
              control={control}
              render={({ field }) => (
                <input
                  type="color"
                  {...field}
                  style={{ width: "100%", height: "40px", border: "none", cursor: "pointer" }}
                />
              )}
            />
          </Grid>

          </div>
          

          {/* ‡∏õ‡∏∏‡πà‡∏°‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
          <Grid item xs={12} sx={{ textAlign: "center" }}>
            <Button type="submit" variant="contained" color="primary" disabled={isSubmitting}>
              {isSubmitting ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å..." : "‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}
            </Button>
          </Grid>
        </Grid>
      </form>
      <SuccessAlert successalert={alertSuccess} />
    </Box>
  );
};

export default WebsiteInfoForm;